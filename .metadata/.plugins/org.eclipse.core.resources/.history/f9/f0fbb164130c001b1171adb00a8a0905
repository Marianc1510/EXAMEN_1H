/*
 * nac.c
 *
 *  Created on: 29 sep. 2020
 *      Author: mariana
 */
#include "publicidad.h"

#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include "cliente.c"
#include "utN.h"
#define TRUE 1
#define FALSE 0
static int pub_generarIdNuevo(void);

int pub_addPublicidadForzada(Publicidad* pArray, int limite,int numeroRubro,char* texto, int posicion,int aviso)
{
	int retorno = -1;
	Publicidad buffer;

	strncpy(buffer.textoAviso,texto,limite);
	buffer.numeroRubro = numeroRubro;
	buffer.idAvisoPublicados= pub_generarIdNuevo();
	pArray[posicion]=buffer;
	pArray[posicion].isEmpty= FALSE;
	buffer.idClienteAnuncio=aviso;

	retorno=0;
	return retorno;
}

static int pub_generarIdNuevo(void)
{
	static int id=0;
	id= id+1;
	return id;
}
/*
 * \brief initEnployees: inicializa el array indicando que todas las posiciones esten vacias
 * \param pArray, array de Publicidad a ser actualizado
 * \param int limite, la longitud del limite del array de employee
 * \return retorno 0 (EXITO) si esta todo bien, -1 (ERROR) si no
 */
int pub_initPublicidads(Publicidad* pArray, int limite)
{
	int retorno = -1;
	if(pArray != NULL && limite > 0)
	{
		for(int i=0; i< limite; i ++)
		{
			pArray[i].isEmpty = TRUE;
		}
		retorno =0;
	}

	return retorno;
}
/*
 * brief printPublicidads: Imprime el array de empleados de manera columnada
 * \param Publicidad* pArray,  direccion de memoria donde se guardan todos los datos
 * \param int limite, longitud del array
 * \return retorno 0(EXITO) se pudo imprimir, -1(ERROR) si no
 */
int pub_printPublicidads(Publicidad* pArray, int limite)
{
	int retorno = -1;
	int i;
	if(pArray != NULL && limite > 0)
	{
		printf("\n----------------------------------------------------------"
			   "\n ID AVISO  | NUMERO RUBRO  | TEXTO AVISO  | ID CLIENTE    "
			   "\n----------------------------------------------------------");
		for( i=0; i< limite; i ++)
		{
			if(pArray[i].isEmpty == FALSE)
			{
				printf("\n %d    -%d     -%s     -%d \n", pArray[i].idAvisoPublicados,pArray[i].numeroRubro,pArray[i].textoAviso,pArray[i].idClienteAnuncio);
			}
		}
		retorno = 0;
	}
	return retorno;
}
/*
 * brief printAvisoCliente: Imprime el array de avisos de un cliente de manera columnada
 * \param Publicidad* pArray,  direccion de memoria donde se guardan todos los datos
 * \param int limite, longitud del array
 * \param int valorBuscado,busca el identificador numerico del cliente
 * \return retorno 0(EXITO) se pudo imprimir, -1(ERROR) si no
 */
int pub_printAvisoCliente(Publicidad* pArray, int limite,int valorBuscado)
{
	int retorno = -1;
	int i;
	if(pArray != NULL && limite > 0)
	{
		printf("\n----------------------------------------------------------"
			   "\n ID Aviso  | NUMERO DE RUBRO  |TEXTO AVISO       "
			   "\n----------------------------------------------------------");
		for( i=0; i< limite; i ++)
		{
			if(pArray[i].idClienteAnuncio == valorBuscado)
			{
				printf("\n %d    -%d     -%s      -%d\n", pArray[i].idAvisoPublicados,pArray[i].numeroRubro,pArray[i].textoAviso,pArray[i].idClienteAnuncio);
			}
		}
		retorno = 0;
	}
	return retorno;
}
/*
 * \brief removePublicidad: Recorre el array para eliminar un empleado utilizando su id
 * \param Publicidad* pArray, direccion de memoria donde se guardan todos los datos
 * \param int limite, longitud del array
 * \param int id, valor cual debemos buscar en el array
 * \return retorno 0(EXITO)si se pudo eliminar, -1(ERROR) si no se pudo encontrar el empleado, puntero nulo
 */
int pub_removePublicidad(Publicidad* pArray, int limite, int id)
{
	int retorno = -1;
	int i;
	int modificar;
	if(pArray !=NULL && limite >=0)
	{
		if(utn_getNumero("\nINGRESE ID A ELIMINAR", "\nERROR", &modificar, 1,1,limite)==0)
		{
			id= modificar;
			for(i=0; i < limite; i++)
			{
				if(pub_findPublicidadById(pArray, limite,id)==0)
				 {
							pArray[i].isEmpty = TRUE;
							retorno=0;
				 }
			}
		}
		else
		{
			printf("\nERROR NO ENTRO AL IF");
		}
	}
	return retorno;
}
/*

 * brief sortPublicidads: recorre el array ordenando a los empleados por los apellidos y sector de manera ascendente
 * \param Publicidad* pArray,  direccion de memoria donde se guardan todos los datos
 * \param int limite, longitud del array
 * \param int orden, valor que indica de que manera a ordenar 1 (UP,ascendente), 0(DOWN, descendente)
 * \return retorno 0(exito) si se pudo ordenar, -1 (ERROR) si no

int pub_sortPublicidads(Publicidad* pArray, int limite, int orden)
{
	int retorno = -1;
	int i;
	int flagSwap;
	Publicidad buffer;
	if(pArray != NULL && limite >= 0 && (orden ==0 || orden ==1))
	{
		do
		{
			flagSwap=0;
			for(i=0;i<limite-1;i++)
			{
				if(pArray[i].isEmpty == FALSE && pArray[i+1].isEmpty == FALSE)
				{
					if((orden == 1 && strncmp(pArray[i].lastname,pArray[i+1].lastname,LONG_LASTNAME) > 0) ||
					   (orden == 0 && strncmp(pArray[i].lastname,pArray[i+1].lastname,LONG_LASTNAME) < 0)==0 ||
					   ((orden ==1 && pArray[i].sector == pArray[i+1].sector) > 0) ||
					   ((orden ==0 && pArray[i].sector == pArray[i+1].sector) < 1 ))
					{
						buffer=pArray[i];
						pArray[i]=pArray[i+1];
						pArray[i+1]=buffer;
						flagSwap =1;
					}
				}
			}
		}while(flagSwap);
	}
	return retorno;
}*/

/*
 * brief buscarLibreRef: recorre el array buscando una posicion vacia
 * \param Publicidad* pArray, direccion de memoria donde se guardan todos los datos
 * \param int limite, longitud del array
 * \param int* pIndice, direccion de memoria donde se va a guardar el espacio vacio
 * \return retorno 0(EXITO)si encuentra espacio vacio, -1(ERROR)si no
 */

int pub_buscarLibreRef(Publicidad* pArray, int limite,int* pIndice)
{	int retorno =-1;
	int i;

	if(pArray != NULL && limite > 0 && pIndice!=NULL)
	{
		for(i=0; i<limite; i++)
		{
			if(pArray[i].isEmpty == TRUE)
			{
				*pIndice=i;
				retorno=0;
				break;
			}
		}
	}
	return retorno;
}
/*
 * \brief findPublicidadById: recorre el array buscando por su ID
 * \param Publicidad* pArray, direccion de memoria donde se guardan todos los datos
 * \param int limite, es la longitud del array
 * \param int idBuscar, valor cual debemos buscar en el array
 * \return retorno la posicion en cual se encuentra el array, devolviendo el valor buscado.
 */
int pub_findPublicidadById(Publicidad* pArray, int limite, int idBuscar)
{
	int retorno =-1;
	int i;

	if(pArray != NULL && limite > 0  && idBuscar >=0)
	{
		for(i=0; i<limite; i++)
		{
			if(pArray[i].idAvisoPublicados == idBuscar)
			{
				retorno=i;
				break;
			}
		}
	}
	return retorno;
}
/*
 * \brief removeCliente: Recorre el array para eliminar un empleado utilizando su id
 * \param Cliente* pArray, direccion de memoria donde se guardan todos los datos
 * \param int limite, longitud del array
 * \param int id, valor cual debemos buscar en el array
 * \return retorno 0(EXITO)si se pudo eliminar, -1(ERROR) si no se pudo encontrar el empleado, puntero nulo
*/
int pub_bajaCliente(Publicidad* pArrayPublicidad, int limitePublicidad,Cliente* pArray, int limite)
{
	int retorno = -1;
	int indiceBuscado;
	if(pArray !=NULL && limite >=0 && pArrayPublicidad !=NULL && limitePublicidad > 0)
	{
			cli_buscarAvisosCliente(pArray, limite, pArrayPublicidad, limitePublicidad, &indiceBuscado);
			if(indiceBuscado !=-1)
			{
				if(pub_printAvisoCliente(pArrayPublicidad, limitePublicidad, indiceBuscado)==0)
				{

					pArray[indiceBuscado].isEmpty = TRUE;
					pArrayPublicidad[indiceBuscado].isEmpty=TRUE;
					retorno=0;
				}
			}
	}
	return retorno;
}

int pub_buscarAvisosCliente(Publicidad* pArrayPublicidad, int limPublicidad,int* avisosPublicados,Cliente* pArray, int limite)
{
	int retorno =-1;
	int indiceCliente;
	int idBuscar;
	int avisoCliente;
	if(pArray != NULL && limite > 0 )
	{
		utn_getNumero("\nINGRESE ID DEL CLIENTE", "\nERROR", &idBuscar, 1,1,limite);
		indiceCliente=cli_findClienteById(pArray, limite, idBuscar);
		if(indiceCliente !=-1 && pArrayPublicidad !=NULL && limPublicidad > 0 && avisosPublicados !=NULL)
		{

			avisoCliente= pub_printAvisoCliente(pArrayPublicidad, limPublicidad, indiceCliente);
			*avisosPublicados= pArray[avisoCliente].idClientePublicacion;
			retorno=0;
		}
	}
	return retorno;
}
